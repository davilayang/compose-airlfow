# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:1.10.14-python3.6
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
# https://stackoverflow.com/questions/6651275/what-do-the-mean-in-this-database-yml-file
# & marks an alias for the node 
# * references the aliased node with the name
# <<: inserts the content of that node.

---
version: '3'

# shared configurations
x-airflow-common:
  &airflow-common # includes image, volumes, user and depends_on, NOT environment
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:1.10.14-python3.6} # if AIRFLOW_IMAGE_NAME is null, use apache/airflow:1.10.14
  environment:
    &airflow-common-env # only include environment
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  # https://docs.docker.com/compose/compose-file/compose-file-v3/#depends_on
  # i.e. start redis and postgres firstly
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  # init service, will init redis and postgres; exit when both are healthy
  airflow-init:
    <<: *airflow-common
    # command: version
    command: db init # similar to "airflow db init", initialize the database after they are healthy
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  # message broker
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
  # database to store DAGs, logs..etc
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes: 
      - postgres-db-volume:/var/lib/postgresql/data # volume mount
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always # if not healthy will restart the service
  # main apache-airflow service
  airflow-webserver:
    <<: *airflow-common
    command: webserver # similar to "airflow webserver", to start the webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"] # fail silently
      interval: 10s
      timeout: 10s
      retries: 5
    restart: alway
  # scheduler service
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler # similar to "airflow scheduler", to start the scheduler
    restart: always
  # worker of CeleryExecutor
  # https://airflow.apache.org/docs/apache-airflow/stable/executor/celery.html
  airflow-worker:
    <<: *airflow-common
    command: celery worker # airflow celery worker
    restart: always
  # celery monitoring tool
  # https://flower.readthedocs.io/en/latest/
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

volumes:
  postgres-db-volume:
